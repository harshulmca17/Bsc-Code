<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED offset CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED format CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="multiply.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="I" type="required" numBits="1" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field6819f939">
	</Field>
	<Field name="unused" type="ignored" numBits="13" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field1394294">
	</Field>
	<Field name="addr" type="required" numBits="12" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field5642032c">
	</Field>
	<Field name="op" type="required" numBits="3" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field7de69f2">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="E" width="1" id="module.Registerb98df1f" />
	<Register name="I" width="1" id="module.Register45176de6" />
	<Register name="TR" width="1" id="module.Register5303a7a" />
	<Register name="ac " width="16" id="module.Register214f223f" />
	<Register name="ar" width="12" id="module.Register5251672e" />
	<Register name="dr" width="16" id="module.Register5e4d273a" />
	<Register name="ir" width="16" id="module.Register1b4a8134" />
	<Register name="pc" width="12" id="module.Register38688aeb" />
	<Register name="status " width="3" id="module.Register5778673b" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="carry bit" bit="0" register="module.Registerb98df1f" halt="false" id="module.ConditionBit3484c229" />
	<ConditionBit name="halt bit" bit="0" register="module.Register5778673b" halt="true" id="module.ConditionBit77e72cae" />

	<!--............. rams ..........................-->
	<RAM name="main memory " length="4096" id="module.RAM1c047338" />

	<!--............. set ...........................-->
	<Set name="CLA" register="module.Register214f223f" start="0" numBits="16" value="0" id="microinstruction.CpusimSet176fa1a5" />
	<Set name="CLE" register="module.Registerb98df1f" start="0" numBits="1" value="0" id="microinstruction.CpusimSet21dd63a8" />
	<Set name="clear AR" register="module.Register5251672e" start="0" numBits="12" value="0" id="microinstruction.CpusimSet4db9bbf6" />
	<Set name="clear DR" register="module.Register5e4d273a" start="0" numBits="16" value="0" id="microinstruction.CpusimSet5ce33b57" />

	<!--............. test ..........................-->
	<Test name="if  ( i==1)" register="module.Register45176de6" start="0" numBits="1" comparison="NE" value="1" omission="2" id="microinstruction.Test435e7f1a" />
	<Test name="if ( i==1 ) for MRI" register="module.Register45176de6" start="0" numBits="1" comparison="NE" value="1" omission="6" id="microinstruction.Test70eaa683" />
	<Test name="if ( ir (0-2)!=7 )" register="module.Register1b4a8134" start="0" numBits="3" comparison="EQ" value="7" omission="3" id="microinstruction.Test3d5a1c5f" />
	<Test name="if (AC==0)" register="module.Register214f223f" start="0" numBits="16" comparison="NE" value="0" omission="1" id="microinstruction.Test66fcc070" />
	<Test name="if (E == 0)" register="module.Registerb98df1f" start="0" numBits="1" comparison="NE" value="0" omission="1" id="microinstruction.Test5bbe2de2" />
	<Test name="if( AC(0)==0 )" register="module.Register214f223f" start="0" numBits="1" comparison="NE" value="0" omission="1" id="microinstruction.Test22b67f7c" />
	<Test name="if( AC(0)==1 )" register="module.Register214f223f" start="0" numBits="1" comparison="NE" value="1" omission="1" id="microinstruction.Test7b6bb7b1" />
	<Test name="if( dr==0 )" register="module.Register5e4d273a" start="0" numBits="16" comparison="NE" value="0" omission="1" id="microinstruction.Test5ce904c4" />
	<Test name="if(ar(0))==1)" register="module.Register5251672e" start="0" numBits="1" comparison="NE" value="1" omission="2" id="microinstruction.Test46380f83" />
	<Test name="if(ar(1))==1)" register="module.Register5251672e" start="1" numBits="1" comparison="NE" value="1" omission="2" id="microinstruction.Testa828579" />
	<Test name="if(ar(10))==1)" register="module.Register5251672e" start="10" numBits="1" comparison="NE" value="1" omission="3" id="microinstruction.Test7f08d052" />
	<Test name="if(ar(11))==1)" register="module.Register5251672e" start="11" numBits="1" comparison="NE" value="1" omission="2" id="microinstruction.Test1ba4f8a6" />
	<Test name="if(ar(2))==1)" register="module.Register5251672e" start="2" numBits="1" comparison="NE" value="1" omission="2" id="microinstruction.Test6bc06877" />
	<Test name="if(ar(3))==1)" register="module.Register5251672e" start="3" numBits="1" comparison="NE" value="1" omission="2" id="microinstruction.Test250a93e5" />
	<Test name="if(ar(4))==1)" register="module.Register5251672e" start="4" numBits="1" comparison="NE" value="1" omission="5" id="microinstruction.Test5973b262" />
	<Test name="if(ar(5))==1)" register="module.Register5251672e" start="5" numBits="1" comparison="NE" value="1" omission="5" id="microinstruction.Test16912f10" />
	<Test name="if(ar(6))==1)" register="module.Register5251672e" start="6" numBits="1" comparison="NE" value="1" omission="2" id="microinstruction.Test15a8cf03" />
	<Test name="if(ar(7))==1)" register="module.Register5251672e" start="7" numBits="1" comparison="NE" value="1" omission="3" id="microinstruction.Test7daed910" />
	<Test name="if(ar(8))==1)" register="module.Register5251672e" start="8" numBits="1" comparison="NE" value="1" omission="3" id="microinstruction.Test622ce9e6" />
	<Test name="if(ar(9))==1)" register="module.Register5251672e" start="9" numBits="1" comparison="NE" value="1" omission="3" id="microinstruction.Test72b02d64" />

	<!--............. increment .....................-->
	<Increment name="AC+1-&gt;AC" register="module.Register214f223f" delta="1" id="microinstruction.Increment5856b47f" />
	<Increment name="AR+1 -&gt; AR" register="module.Register5251672e" delta="1" id="microinstruction.Increment24642b28" />
	<Increment name="DR+1 -&gt; DR" register="module.Register5e4d273a" delta="1" id="microinstruction.Increment2c4d61c2" />
	<Increment name="PC+1 -&gt;PC" register="module.Register38688aeb" delta="2" id="microinstruction.Incrementc4d1e47" />

	<!--............. shift .........................-->
	<Shift name="AC ( Left Shift )" type="cyclic" source="module.Register214f223f" destination="module.Register214f223f" direction="left" distance="1" id="microinstruction.Shift16515bb7" />
	<Shift name="AC ( Right Shift )" type="cyclic" source="module.Register214f223f" destination="module.Register214f223f" direction="right" distance="1" id="microinstruction.Shift375c56d3" />

	<!--............. logical .......................-->
	<Logical name="AND" type="AND" source1="module.Register214f223f" source2="module.Register5e4d273a" destination="module.Register214f223f" id="microinstruction.Logical174e70f2" />
	<Logical name="CMA" type="NOT" source1="module.Register214f223f" source2="module.Register214f223f" destination="module.Register214f223f" id="microinstruction.Logical1ed92bd2" />
	<Logical name="CME" type="NOT" source1="module.Registerb98df1f" source2="module.Registerb98df1f" destination="module.Registerb98df1f" id="microinstruction.Logical43cbf7d0" />
	<Logical name="OR" type="OR" source1="module.Register214f223f" source2="module.Register5e4d273a" destination="module.Register214f223f" id="microinstruction.Logical3fa9b76" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="ADD" type="ADD" source1="module.Register214f223f" source2="module.Register5e4d273a" destination="module.Register214f223f" carryBit="module.ConditionBit3484c229" id="microinstruction.Arithmetic39f46204" />
	<Arithmetic name="DIVIDE" type="DIVIDE" source1="module.Register214f223f" source2="module.Register5e4d273a" destination="module.Register214f223f" id="microinstruction.Arithmetic5b4f1255" />
	<Arithmetic name="MULTIPLY" type="MULTIPLY" source1="module.Register214f223f" source2="module.Register5e4d273a" destination="module.Register214f223f" id="microinstruction.Arithmetic243cb948" />
	<Arithmetic name="SUBTRACT" type="SUBTRACT" source1="module.Register214f223f" source2="module.Register5e4d273a" destination="module.Register214f223f" id="microinstruction.Arithmeticea8388e" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC(0) -&gt; E" source="module.Register214f223f" srcStartBit="0" dest="module.Registerb98df1f" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR7cf168cf" />
	<TransferRtoR name="AC(15) -&gt; E" source="module.Register214f223f" srcStartBit="15" dest="module.Registerb98df1f" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR4d182e1e" />
	<TransferRtoR name="E -&gt; TR" source="module.Registerb98df1f" srcStartBit="0" dest="module.Register5303a7a" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR6e7bdb1c" />
	<TransferRtoR name="TR -&gt; AC(0)" source="module.Register5303a7a" srcStartBit="0" dest="module.Register214f223f" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR56e43ef" />
	<TransferRtoR name="TR -&gt; AC(15)" source="module.Register5303a7a" srcStartBit="0" dest="module.Register214f223f" destStartBit="15" numBits="1" id="microinstruction.TransferRtoRa2e02b2" />
	<TransferRtoR name="ac-&gt;dr" source="module.Register214f223f" srcStartBit="0" dest="module.Register5e4d273a" destStartBit="0" numBits="16" id="microinstruction.TransferRtoR52b2f956" />
	<TransferRtoR name="ar-&gt;pc" source="module.Register5251672e" srcStartBit="0" dest="module.Register38688aeb" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR640fa784" />
	<TransferRtoR name="dr -&gt; ar" source="module.Register5e4d273a" srcStartBit="4" dest="module.Register5251672e" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR3fbefe6e" />
	<TransferRtoR name="dr-&gt;ac" source="module.Register5e4d273a" srcStartBit="0" dest="module.Register214f223f" destStartBit="0" numBits="16" id="microinstruction.TransferRtoR14320874" />
	<TransferRtoR name="dr-&gt;ir" source="module.Register5e4d273a" srcStartBit="0" dest="module.Register1b4a8134" destStartBit="0" numBits="16" id="microinstruction.TransferRtoR60c90207" />
	<TransferRtoR name="ir(15) -&gt; I" source="module.Register1b4a8134" srcStartBit="15" dest="module.Register45176de6" destStartBit="0" numBits="1" id="microinstruction.TransferRtoR2ca44b35" />
	<TransferRtoR name="ir(3-14)  -&gt;ar" source="module.Register1b4a8134" srcStartBit="3" dest="module.Register5251672e" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR56459b78" />
	<TransferRtoR name="pc -&gt;dr" source="module.Register38688aeb" srcStartBit="0" dest="module.Register5e4d273a" destStartBit="4" numBits="12" id="microinstruction.TransferRtoR73e20f87" />
	<TransferRtoR name="pc-&gt;ar" source="module.Register38688aeb" srcStartBit="0" dest="module.Register5251672e" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR7e69a380" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="Decode" ir="module.Register1b4a8134" id="microinstruction.Decode2f0e73ba" />

	<!--............. set condition bit .............-->
	<SetCondBit name="set carry bit " bit="module.ConditionBit3484c229" value="1" id="microinstruction.SetCondBit5dcfd078" />
	<SetCondBit name="set halt bit" bit="module.ConditionBit77e72cae" value="1" id="microinstruction.SetCondBit767fa665" />

	<!--............. io ............................-->
	<IO name="ac -&gt; output" direction="output" type="integer" buffer="module.Register214f223f" connection="[console]" id="microinstruction.IO3435c7be" />
	<IO name="input -&gt; ac" direction="input" type="integer" buffer="module.Register214f223f" connection="[console]" id="microinstruction.IO36cca5b9" />

	<!--............. memory access .................-->
	<MemoryAccess name="dr -&gt; m[ar]" direction="write" memory="module.RAM1c047338" data="module.Register5e4d273a" address="module.Register5251672e" id="microinstruction.MemoryAccess3f56b60a" />
	<MemoryAccess name="m[ar] -&gt; dr" direction="read" memory="module.RAM1c047338" data="module.Register5e4d273a" address="module.Register5251672e" id="microinstruction.MemoryAccess55c96b02" />

	<!--............. end ...........................-->
	<End id="microinstruction.End1a907c4e" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="microinstruction.TransferRtoR7e69a380" />
		<Microinstruction microRef="microinstruction.MemoryAccess55c96b02" />
		<Microinstruction microRef="microinstruction.TransferRtoR60c90207" />
		<Microinstruction microRef="microinstruction.Incrementc4d1e47" />
		<Microinstruction microRef="microinstruction.TransferRtoR56459b78" />
		<Microinstruction microRef="microinstruction.TransferRtoR2ca44b35" />
		<Microinstruction microRef="microinstruction.Test3d5a1c5f" />
		<Microinstruction microRef="microinstruction.Test435e7f1a" />
		<Microinstruction microRef="microinstruction.MemoryAccess55c96b02" />
		<Microinstruction microRef="microinstruction.TransferRtoR3fbefe6e" />
		<Microinstruction microRef="microinstruction.Decode2f0e73ba" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="ISZ" opcode="6" format="op addr I" >
		<Microinstruction microRef="microinstruction.MemoryAccess55c96b02" />
		<Microinstruction microRef="microinstruction.Increment2c4d61c2" />
		<Microinstruction microRef="microinstruction.Test5ce904c4" />
		<Microinstruction microRef="microinstruction.Incrementc4d1e47" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
	</MachineInstruction>

	<MachineInstruction name="RR" opcode="7" format="op addr I" >
		<Microinstruction microRef="microinstruction.Test70eaa683" />
		<Microinstruction microRef="microinstruction.Test46380f83" />
		<Microinstruction microRef="microinstruction.IO36cca5b9" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Testa828579" />
		<Microinstruction microRef="microinstruction.IO3435c7be" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Test46380f83" />
		<Microinstruction microRef="microinstruction.CpusimSet176fa1a5" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Testa828579" />
		<Microinstruction microRef="microinstruction.CpusimSet21dd63a8" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Test6bc06877" />
		<Microinstruction microRef="microinstruction.Logical1ed92bd2" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Test250a93e5" />
		<Microinstruction microRef="microinstruction.Logical43cbf7d0" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Test5973b262" />
		<Microinstruction microRef="microinstruction.TransferRtoR6e7bdb1c" />
		<Microinstruction microRef="microinstruction.TransferRtoR4d182e1e" />
		<Microinstruction microRef="microinstruction.Shift375c56d3" />
		<Microinstruction microRef="microinstruction.TransferRtoR56e43ef" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Test16912f10" />
		<Microinstruction microRef="microinstruction.TransferRtoR6e7bdb1c" />
		<Microinstruction microRef="microinstruction.TransferRtoR7cf168cf" />
		<Microinstruction microRef="microinstruction.Shift16515bb7" />
		<Microinstruction microRef="microinstruction.TransferRtoRa2e02b2" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Test15a8cf03" />
		<Microinstruction microRef="microinstruction.Increment5856b47f" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Test7daed910" />
		<Microinstruction microRef="microinstruction.Test22b67f7c" />
		<Microinstruction microRef="microinstruction.Incrementc4d1e47" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Test622ce9e6" />
		<Microinstruction microRef="microinstruction.Test7b6bb7b1" />
		<Microinstruction microRef="microinstruction.Incrementc4d1e47" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Test72b02d64" />
		<Microinstruction microRef="microinstruction.Test66fcc070" />
		<Microinstruction microRef="microinstruction.Incrementc4d1e47" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Test7f08d052" />
		<Microinstruction microRef="microinstruction.Test5bbe2de2" />
		<Microinstruction microRef="microinstruction.Incrementc4d1e47" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
		<Microinstruction microRef="microinstruction.Test1ba4f8a6" />
		<Microinstruction microRef="microinstruction.SetCondBit767fa665" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="0" format="op addr I" >
		<Microinstruction microRef="microinstruction.Logical174e70f2" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
	</MachineInstruction>

	<MachineInstruction name="BSA" opcode="5" format="op addr I" >
		<Microinstruction microRef="microinstruction.CpusimSet4db9bbf6" />
		<Microinstruction microRef="microinstruction.TransferRtoR73e20f87" />
		<Microinstruction microRef="microinstruction.MemoryAccess3f56b60a" />
		<Microinstruction microRef="microinstruction.TransferRtoR56459b78" />
		<Microinstruction microRef="microinstruction.TransferRtoR640fa784" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
	</MachineInstruction>

	<MachineInstruction name="BUN" opcode="4" format="op addr I" >
		<Microinstruction microRef="microinstruction.TransferRtoR640fa784" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="3" format="op addr I" >
		<Microinstruction microRef="microinstruction.TransferRtoR52b2f956" />
		<Microinstruction microRef="microinstruction.MemoryAccess3f56b60a" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="2" format="op addr I" >
		<Microinstruction microRef="microinstruction.MemoryAccess55c96b02" />
		<Microinstruction microRef="microinstruction.TransferRtoR14320874" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="1" format="op addr I" >
		<Microinstruction microRef="microinstruction.MemoryAccess55c96b02" />
		<Microinstruction microRef="microinstruction.Arithmetic39f46204" />
		<Microinstruction microRef="microinstruction.End1a907c4e" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="module.RAM1c047338" startingAddress="4" />

	<!--............. module window info ............-->
	<ModuleWindowsInfo>
		<RAMWindowInfo ram="module.RAM1c047338" cellSize="2" contentsbase="Binary" addressbase="Hexadecimal" 
			top="0" left="728" width="621" height="582" />
		<RegisterWindowInfo base="Binary" 
			top="112" left="452" width="332" height="262" />
	</ModuleWindowsInfo>

</Machine>
